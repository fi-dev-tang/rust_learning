/*
[写在最前]:
生命周期是编译器(借用检查器)使用的一种构造，用于确保所有借用都是有效的。
具体来说，一个变量的生命周期从它被创建时开始，到它被销毁时结束。虽然生命周期和作用域经常一起提及，但它们并不是相同的。

当我们通过 & 借用一个变量时，该借用的生命周期由其声明的位置决定。因此，只要借用在其出借者被销毁之前结束，该借用就是有效的。
借用的作用域由引用在何处使用来确定。

生命周期和作用域相关联，两者之间具有差异。

1. &T 的生命周期，由其声明位置处开始，由 T 被销毁之前结束
2. 没有名称或类型被分配给标记生命周期，这限制了我们能够如何使用生命周期

[psNote]:
这里 borrow1 和 borrow2 的作用域和生命周期重合
但更复杂情况下，涉及多个引用或引用传递给其他函数时，生命周期可能不会与作用域完全重合。
编译器根据引用的具体情况确定最合适的生命周期长度
*/
fn main(){
    let i = 3;  // lifetime for `i` starts

    {
        let borrow1 = &i;   // `borrow1` lifetime starts.
        println!("borrow1: {}", borrow1);
    } // borrow1 ends

    {
        let borrow2 = &i;   // `borrow2` lifetime starts.
        println!("borrow2: {}", borrow2);
    }// borrow2 ends
} // lifetime ends